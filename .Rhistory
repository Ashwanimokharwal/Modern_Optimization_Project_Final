source("E:/ashwani_project/test.R")
source("E:/ashwani_project/test.R")
source("E:/ashwani_project/test.R")
data <- read.csv("E:/ashwani_project/testdataset.csv")
# Load the dataset from a specific file path
data <- read.csv("E:/ashwani_project/testdataset.csv")
# Print the dataset
print(data)
# Load the dataset from a specific file path
data <- read.csv("E:/ashwani_project/newdata.csv")
# Print the dataset
print(data)
data <- read.csv("E:/ashwani_project/testdataset.csv")
data <- read.csv("E:/ashwani_project/testdataset.csv")
data <- read.csv("E:/ashwani_project/testdataset.csv", fileEncoding = "UTF-8")
data <- read.csv("E:/ashwani_project/testdataset.csv", fileEncoding = "latin1")
data
source("E://ashwani_project/TSP 1 (1).R")
source("E://ashwani_project/runGA (1).R")
results1 <- runGA(noRuns = 30, problem = "tsp" )
results2 <- runGA(noRuns = 30, problem = "tsp" )
results3 <- runGA(noRuns = 30, problem = "tsp",  popSize = 50)
results1 <- runGA(noRuns = 30, problem = "tsp" )
results2 <- runGA(noRuns = 30, problem = "tsp" )
results3 <- runGA(noRuns = 30, problem = "tsp" )
source("E://ashwani_project/parseData (1).R")
parsemydata1 <- parseData(results1,2,4)
parsemydata2 <- parseData(results2,2,4)
parsemydata3 <- parseData(results3,2,4)
plotbars(parsemydata1,parsemydata2,parsemydata3,"crossover=0.2","crossover=0.3","crossover=0.4")
source("E://ashwani_project/plotbars (1).R")
plotbars(parsemydata1,parsemydata2,parsemydata3,"crossover=0.2","crossover=0.3","crossover=0.4")
source("E://ashwani_project/parseData (1).R")
source("E://ashwani_project/plotbars (1).R")
source("E://ashwani_project/plotbars (1).R")
source("E://ashwani_project/plotbars (1).R")
source("E://ashwani_project/plotbars (1).R")
source("E://ashwani_project/parseData (1).R")
source("E://ashwani_project/plotbars (1).R")
source("E://ashwani_project/parseData (1).R")
source("E://ashwani_project/plotbars (1).R")
results1 <- runGA(noRuns = 30, problem = "tsp" )
source("E://ashwani_project/TSP 1 (1).R")
source("E://ashwani_project/runGA (1).R")
source("E://ashwani_project/parseData (1).R")
source("E://ashwani_project/plotbars (1).R")
source("E://ashwani_project/plotbars (1).R")
results1 <- runGA(noRuns = 30, problem = "tsp" )
source("E://ashwani_project/runGA (1).R")
source("E://ashwani_project/parseData (1).R")
source("E://ashwani_project/plotbars (1).R")
findminmax <- function(data, minimise = TRUE){
minmax <- NA
if (minimise) minmax <- min(data[,2])
else minmax <- max(data[,2])
rownum <- which(data[,2] == minmax)
if (length(rownum) > 1) rownum <- rownum[1]
if (minimise)
return (minmax - data [rownum,3])
else return (minmax + data [rownum,3])
}
plotbars<- function(data1, data2, data3,
cap1 = "GA1", cap2 = "GA2", cap3 = "GA3"){
data = data1
hues = c("black","blue","green")
min1 = findminmax(data1)   #min(data1) - data1 [which(data1 == min(data1))+2*nrow(data1)]
min2 = findminmax(data2)   #min(data2) - data2 [which(data2 == min(data2))+nrow(data2)]
min3 = findminmax(data3)   #min(data3) - data3 [which(data3 == min(data3))+nrow(data3)]
max1 = findminmax(data1, FALSE)   #max(data1) + data1 [which(data1 == max(data1))+nrow(data1)]
max2 = findminmax(data2, FALSE)   #max(data2) + data2 [which(data2 == max(data2))+nrow(data2)]
max3 = findminmax(data3, FALSE)   #max(data3) + data3 [which(data3 == max(data3))+nrow(data3)]
minn = min(min1, min2, min3)
maxx = max(max1, max2, max3)
df <- data.frame(x=data[,1], y=data[,2], dy = data[,3])  #dy = length of error bar
plot(df$x, df$y, type = "l", col = hues[1],  ylim=c(minn, maxx), #ylim = c(0.96, 0.985),   #choose ylim CAREFULLY as per your data ranges
main = "Best Fitness Values", xlab = "Generations", ylab = "Fitness")  #plot the line (mean values)
segments(df$x, df$y - df$dy, df$x, df$y + df$dy, col = hues[1]);    #plot the error bars mean-errorbar, mean+errorbar
data = data2
df <- data.frame(x=data[,1], y=data[,2], dy = data[,3])  #dy = length of error bar
lines(df$x, df$y, col = hues[2])
segments(df$x, df$y - df$dy, df$x, df$y + df$dy, col = hues[2]);
data = data3
df <- data.frame(x=data[,1], y=data[,2], dy = data[,3])  #dy = length of error bar
lines(df$x, df$y, col = hues[3])
segments(df$x, df$y - df$dy, df$x, df$y + df$dy, col = hues[3]);
legend("topleft", legend = c(cap1, cap2, cap3), col = hues, lwd = 1,
cex = 0.5)
}
plotbars(parsemydata1,parsemydata2,parsemydata3,"crossover=0.2","crossover=0.3","crossover=0.4")
findminmax <- function(data, minimise = TRUE){
minmax <- NA
if (minimise) minmax <- min(data[,2])
else minmax <- max(data[,2])
rownum <- which(data[,2] == minmax)
if (length(rownum) > 1) rownum <- rownum[1]
if (minimise)
return (minmax - data [rownum,3])
else return (minmax + data [rownum,3])
}
plotbars<- function(data1, data2, data3,
cap1 = "GA1", cap2 = "GA2", cap3 = "GA3"){
data = data1
hues = c("black","blue","green")
min1 = findminmax(data1)   #min(data1) - data1 [which(data1 == min(data1))+2*nrow(data1)]
min2 = findminmax(data2)   #min(data2) - data2 [which(data2 == min(data2))+nrow(data2)]
min3 = findminmax(data3)   #min(data3) - data3 [which(data3 == min(data3))+nrow(data3)]
max1 = findminmax(data1, FALSE)   #max(data1) + data1 [which(data1 == max(data1))+nrow(data1)]
max2 = findminmax(data2, FALSE)   #max(data2) + data2 [which(data2 == max(data2))+nrow(data2)]
max3 = findminmax(data3, FALSE)   #max(data3) + data3 [which(data3 == max(data3))+nrow(data3)]
minn = min(min1, min2, min3)
maxx = max(max1, max2, max3)
df <- data.frame(x=data[,1], y=data[,2], dy = data[,3])  #dy = length of error bar
plot(df$x, df$y, type = "l", col = hues[1],  ylim=c(minn, maxx), #ylim = c(0.96, 0.985),   #choose ylim CAREFULLY as per your data ranges
main = "Best Fitness Values", xlab = "Generations", ylab = "Fitness")  #plot the line (mean values)
segments(df$x, df$y - df$dy, df$x, df$y + df$dy, col = hues[1]);    #plot the error bars mean-errorbar, mean+errorbar
data = data2
df <- data.frame(x=data[,1], y=data[,2], dy = data[,3])  #dy = length of error bar
lines(df$x, df$y, col = hues[2])
segments(df$x, df$y - df$dy, df$x, df$y + df$dy, col = hues[2]);
data = data3
df <- data.frame(x=data[,1], y=data[,2], dy = data[,3])  #dy = length of error bar
lines(df$x, df$y, col = hues[3])
segments(df$x, df$y - df$dy, df$x, df$y + df$dy, col = hues[3]);
legend("topleft", legend = c(cap1, cap2, cap3), col = hues, lwd = 1,
cex = 0.5)
}
plotbars(parsemydata1,parsemydata2,parsemydata3,"crossover=0.2","crossover=0.3","crossover=0.4")
plotbars(parsemydata1,parsemydata2,parsemydata3,"crossover=0.2","crossover=0.3","crossover=0.4")
source("E://ashwani_project/TSP 1 (1).R")
source("E://ashwani_project/TSP 1 (1).R")
source("E://ashwani_project/runGA (1).R")
source("E://ashwani_project/parseData (1).R")
source("E://ashwani_project/plotbars (1).R")
source("E:/ashwani_project/TSP 1 (1).R")
source("E:/ashwani_project/runGA (1).R")
plotTSPSolution(solution)
solution <- getBestSolution()
plotTSPSolution(solution)
plotTSPSolution(bestSolution)
parseData <- function(data, firstcolumn, noRuns){
col <- firstcolumn
allstats <- (ncol(data)-1)/noRuns   #how many stats were collected. Omit the first column (Generations)
cols <- seq(col,noRuns*allstats, by=allstats)
subdata <- data[,cols]
noGens <- nrow(data)
pdata <- matrix(nrow = noGens, ncol = 3)
for (i in 1:noGens){
pdata[i,1] = i
pdata[i,2] = mean(subdata[i,])
pdata[i,3] = 1.96*sd((subdata[i,]))/sqrt(noRuns)   #compute the length of error bar.
print(paste(pdata[i,3]))
}
return (pdata)
}
parsemydata1 <- parseData(results1,2,30)
parsemydata2 <- parseData(results2,2,30)
parsemydata3 <- parseData(results3,2,30)
source("E:/ashwani_project/plotbars (1).R")
source("E:/ashwani_project/TSP 1 (1).R")
source("E:/ashwani_project/runGA (1).R")
source("E:/ashwani_project/parseData (1).R")
source("E:/ashwani_project/plotbars (1).R")
source("E:/ashwani_project/TSP 1 (1).R")
source("E:/ashwani_project/runGA (1).R")
source("E:/ashwani_project/parseData (1).R")
source("E:/ashwani_project/plotbars (1).R")
source("E:/ashwani_project/plotbars (1).R")
source("E:/ashwani_project/runGA (1).R")
source("E:/ashwani_project/TSP 1 (1).R")
source("E:/ashwani_project/runGA (1).R")
source("E:/ashwani_project/TSP 1 (1).R")
source("E:/ashwani_project/runGA (1).R")
source("E:/ashwani_project/parseData (1).R")
source("E:/ashwani_project/plotbars (1).R")
